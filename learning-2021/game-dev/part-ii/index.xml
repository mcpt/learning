<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Part II on MCPT Learning Resources</title><link>https://learning.mcpt.ca/learning-2021/game-dev/part-ii/</link><description>Recent content in Part II on MCPT Learning Resources</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://learning.mcpt.ca/learning-2021/game-dev/part-ii/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://learning.mcpt.ca/learning-2021/game-dev/part-ii/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learning.mcpt.ca/learning-2021/game-dev/part-ii/introduction/</guid><description>Game Dev - Season IV Welcome to the return of MCPT&amp;rsquo;s Game Dev Series! Over the course of 3 workshops, we have something for everyone, whether you’re a beginner or an experienced coder. Inspired by Bloons Tower Defense, you will learn how to code your very own tower-defense game in Processing!
ChallengesEarn up to 300 bonus points with our tower-creation challenges! Stay tuned for more info!
Demo What is a tower-defense game?</description></item><item><title>Advanced Tracking</title><link>https://learning.mcpt.ca/learning-2021/game-dev/part-ii/advancedtracking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learning.mcpt.ca/learning-2021/game-dev/part-ii/advancedtracking/</guid><description>Part2_AdvancedTracking Part2_AdvancedTracking.zip (12 KB) What You&amp;rsquo;ll Learn Last session we implemented a function that rotated a tower to face a balloon based on the slope of the line made with a balloon and tower. Today we will implement a more representative procedure, which will make a tower face a balloon that is within hit radius, and is also the farthest along the path.
Key Concepts Using a function that processes inputs to create an output Implementing tower range Implementing a filtering mechanism that will get the right balloon Remember that in Processing, Y values increase as you move down the window.</description></item><item><title>Currency System</title><link>https://learning.mcpt.ca/learning-2021/game-dev/part-ii/currency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learning.mcpt.ca/learning-2021/game-dev/part-ii/currency/</guid><description>Currency Template Code Currency_Template.zip (1 KB) Reward for Balloon Pop Since we have a working system to send balloons, the next step is to reward the user when they pop balloons.
See code void drawBalloons() { for (int i = 0; i &amp;lt; balloons.size(); i++) { float[] balloon = balloons.get(i); updatePositions(balloon); if (balloon[hp] &amp;lt;= 0) { handleBalloonPop(); // the balloon has been popped by a tower balloons.remove(i); i--; continue; } if (atEndOfPath(balloon[distanceTravelled])) { balloons.</description></item><item><title>New Towers</title><link>https://learning.mcpt.ca/learning-2021/game-dev/part-ii/newtower/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learning.mcpt.ca/learning-2021/game-dev/part-ii/newtower/</guid><description>Part2_NewTowerTemplate NewTowerTemplate.zip (8 KB) Support for New Towers Part I used only one type of tower, and it was hard-coded into our system. Our program had no support for updating or changing the type of tower, since it assumed there was only one type. Usually, we would use Object Oriented Programming, but this topic isn’t taught until ICS3U. Instead, we’ll try to simplify it into something that is less organized but doesn’t require a whole new topic of programming.</description></item><item><title>Projectiles</title><link>https://learning.mcpt.ca/learning-2021/game-dev/part-ii/projectiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learning.mcpt.ca/learning-2021/game-dev/part-ii/projectiles/</guid><description>Projectile API For projectiles, we decided to provide an API for you guys. We’ve coded three types of projectiles already, but this part of the workshop will teach you how we made them and how to make more.
The API contains all the code needed for a projectile to function. Essentially, it creates, stores and updates projectiles and their attributes.
In short, every projectile has seven values: damage, pierce, angle, current distance travelled, max distance travelled, thickness, and damage type.</description></item></channel></rss>