<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Novel Workshop on MCPT Learning Resources</title><link>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/visual-novel/</link><description>Recent content in Visual Novel Workshop on MCPT Learning Resources</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/visual-novel/index.xml" rel="self" type="application/rss+xml"/><item><title>Reading JSON</title><link>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/visual-novel/reading-json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/visual-novel/reading-json/</guid><description>As a programmer, you never want to hard-code your data. You ideally want to abstract it and read it from a file. In this lesson, we&amp;rsquo;ll teach you how to read from a JavaScript Object Notation (JSON) file in Processing.
What is JSON? JSON is a format for storing data. It is identical to the code needed to create JavaScript Objects. Here&amp;rsquo;s an example:
{ &amp;#34;employees&amp;#34;:[ {&amp;#34;firstName&amp;#34;:&amp;#34;John&amp;#34;, &amp;#34;lastName&amp;#34;:&amp;#34;Doe&amp;#34;}, {&amp;#34;firstName&amp;#34;:&amp;#34;Anna&amp;#34;, &amp;#34;lastName&amp;#34;:&amp;#34;Smith&amp;#34;}, {&amp;#34;firstName&amp;#34;:&amp;#34;Peter&amp;#34;, &amp;#34;lastName&amp;#34;:&amp;#34;Jones&amp;#34;} ] } As you can see, the object is declared using curly braces {}, and the array is declared using square braces [].</description></item><item><title>Drawing Characters</title><link>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/visual-novel/drawing-characters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/visual-novel/drawing-characters/</guid><description>Now that we have some dialogue, why don&amp;rsquo;t we associate those words with a character?
Storing Character Data We can tango one of two ways:
We make a &amp;ldquo;character archive&amp;rdquo;, and read from said archive every time we want to draw a character We attach the related character data to each dialogue file The first one is the better option for the long term but takes lots more work. In a game jam, speed is key!</description></item><item><title>Writing Dialogue</title><link>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/visual-novel/dialogue-writing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/visual-novel/dialogue-writing/</guid><description>&lt;p>Alright, so we know how to display dialogue using JSON files, but what good is that without some actual dialogue?&lt;/p>
&lt;h1 id="strategies">Strategies&lt;/h1>
&lt;p>Okay so obviously there is not one single way to write dialogue. It will always take some creativity that cannot really be taught, however, we can provide suggestions for how to write a whole visual novel&amp;rsquo;s worth of dialogue.&lt;/p>
&lt;h1 id="organization-and-planning">Organization and Planning&lt;/h1>
&lt;p>It&amp;rsquo;s important to stay organized.&lt;/p>
&lt;pre tabindex="0">&lt;code>1. Mackenzie: Oh sorry, did I keep you waiting? [NAME], right?
Options:
Yep, that&amp;#39;s me. (2)
Who? (3)
MCPT, right? (4)
No. (3)
&lt;/code>&lt;/pre>&lt;p>Here we have an example of what the planning document for our demo looked like. We have this first option here along with some dialogue, however the most important part are the options. All of the player options have a number next to them. These numbers show what number dialogue is the &amp;ldquo;successor&amp;rdquo; for that option. In Google Docs, you can add hyperlinks to different headings for ease of going between options and following paths.&lt;/p>
&lt;p>This format also makes the transition to JSON files quite easy, since your successors array is essentially already made for you. It also prevents dialogue trees from becoming so complex that they become impossible to navigate.&lt;/p>
&lt;h1 id="other-tips">Other Tips&lt;/h1>
&lt;p>Looking to other games may prove useful to see how dialogue is written. If there&amp;rsquo;s a visual novel-type game you enjoy and think has good dialogue, it might be useful to use that structure as a basis for your own. Seeing what a good story looks like can help make yours better.&lt;/p>
&lt;p>Other people are also incredibly helpful. If you&amp;rsquo;re unsure of something, maybe ask someone to say the dialogue with you out loud, playing different characters. Even if you choose not to do that, a second set of eyes is always useful.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>So, we have some dialogue! Our game now has a well written story that is uniquely yours and is theoretically now a complete visual novel. Good job!&lt;/p></description></item><item><title>Dialogue Options</title><link>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/visual-novel/dialogue-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/visual-novel/dialogue-options/</guid><description>Alright, so we have our characters talking on the screen, but what&amp;rsquo;s a visual novel without some decisions?
Reviewing Code Let&amp;rsquo;s have a look back at our dialogue files:
{ &amp;#34;characters&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Me&amp;#34;, &amp;#34;link&amp;#34;: &amp;#34;dog.jpg&amp;#34;, &amp;#34;x&amp;#34;: 100, &amp;#34;y&amp;#34;: 100, &amp;#34;w&amp;#34;: 250, &amp;#34;h&amp;#34;: 250 }, { &amp;#34;name&amp;#34;: &amp;#34;You&amp;#34;, &amp;#34;link&amp;#34;: &amp;#34;cat.png&amp;#34;, &amp;#34;x&amp;#34;: 600, &amp;#34;y&amp;#34;: 100, &amp;#34;w&amp;#34;: 250, &amp;#34;h&amp;#34;: 250 } ], &amp;#34;data&amp;#34;: [ { &amp;#34;speaker&amp;#34;: &amp;#34;Me&amp;#34;, &amp;#34;dialogue&amp;#34;: &amp;#34;Hi!&amp;#34; }, { &amp;#34;speaker&amp;#34;: &amp;#34;You&amp;#34;, &amp;#34;dialogue&amp;#34;: &amp;#34;Hi!</description></item></channel></rss>