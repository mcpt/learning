<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Platformer Game Workshop on MCPT Learning Resources</title><link>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/stealing-christmas/</link><description>Recent content in Platformer Game Workshop on MCPT Learning Resources</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/stealing-christmas/index.xml" rel="self" type="application/rss+xml"/><item><title>Basic Player Movement</title><link>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/stealing-christmas/movement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/stealing-christmas/movement/</guid><description>The first thing we need to do when creating our game is to create a character. In our game, the character will be the Grinch (from &amp;ldquo;How the Grinch Stole Christmas&amp;rdquo;, or &amp;ldquo;The Grinch&amp;rdquo;).
Keyboard Input We&amp;rsquo;ll be getting input for the character using the WASD keys on a computer. We use the keyPressed() method to check for the pressing of the keys, and keyReleased() for their release.
// keep track of which buttons are pressed void keyPressed() { if (key == &amp;#39;w&amp;#39; || key == UP) moveKeys[0] = true; if (key == &amp;#39;s&amp;#39; || key == DOWN) moveKeys[1] = true; if (key == &amp;#39;a&amp;#39; || key == LEFT) moveKeys[2] = true; if (key == &amp;#39;d&amp;#39; || key == RIGHT) moveKeys[3] = true; } void keyReleased() { if (key == &amp;#39;w&amp;#39; || key == UP) moveKeys[0] = false; if (key == &amp;#39;s&amp;#39; || key == DOWN) moveKeys[1] = false; if (key == &amp;#39;a&amp;#39; || key == LEFT) moveKeys[2] = false; if (key == &amp;#39;d&amp;#39; || key == RIGHT) moveKeys[3] = false; } At the top of our program, we create the moveKeys[] array.</description></item><item><title>Collisions</title><link>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/stealing-christmas/collisions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/stealing-christmas/collisions/</guid><description>For this lesson, we&amp;rsquo;ll be analyzing the code in the file Platforms.
Setup The setup is pretty simple. There&amp;rsquo;s only one global variable:
ArrayList&amp;lt;int[]&amp;gt; platforms = new ArrayList&amp;lt;int[]&amp;gt;(); This creates a list of platforms. That&amp;rsquo;s it.
Simple Collisions The first method rectCollision() checks if two rectangles collide, and returns true or false depending on what it finds:
boolean rectCollision(int x1, int y1, int w1, int h1, int x2, int y2, int w2, int h2) { // checks if two rectangles collide return x1 &amp;lt; x2 + w2 &amp;amp;&amp;amp; x1 + w1 &amp;gt; x2 &amp;amp;&amp;amp; y1 &amp;lt; y2 + h2 &amp;amp;&amp;amp; h1 + y1 &amp;gt; y2; } It works by comparing the rectangles&amp;rsquo; coordinates, and seeing if they &amp;ldquo;overlap&amp;rdquo;.</description></item><item><title>Jumping Physics</title><link>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/stealing-christmas/physics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://learning.mcpt.ca/learning-2022/holiday-game-jam-ii/stealing-christmas/physics/</guid><description>Now we&amp;rsquo;re going to look into the physics of the Grinch&amp;rsquo;s jump.
Variables At the top of your Grinch file, you&amp;rsquo;ll need to add the following variables:
int grinchJumpHeight = 400; boolean grinchJumping = false; int grinchJumpingFrame = 0; int animationCounter = 0; int frame = 0; Drawing the Grinch Create a method called drawGrinch() that &amp;ldquo;draws&amp;rdquo; the Grinch on the game screen, and moves it through his walking cycles.</description></item></channel></rss>